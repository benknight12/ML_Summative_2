mf_gamm <- gamm(
bmi ~ sex + s(log(age), by = sex, bs = 'ps', k = 10, m = c(2, 2)) +
s(log(age), id, bs = "fs", xt = "ps", k = 10, m = c(2, 1)),
method = "REML", data = dat)
summary(mf_gamm$gam)
ggpredict(mf_gamm, terms = c("age [all]", "sex [all]")) %>% plot()
ggpredict(m_gamm, terms = c("age [all]")) %>% plot()
ggpredict(f_gamm, terms = c("age [all]")) %>% plot()
ggeffect(rcs_f_best, terms = c("age [all]")) %>% plot()
for (c in 3:6){
lmer(bmi ~ ns(age, c)* sex + (ns(age, 2) | id ),
REML = F, data = dat)
}
l <- lmer(bmi ~ ns(age, c)* sex + (ns(age, 2) | id ),
REML = F, data = dat)
for (c in 3:6){
l <- lmer(bmi ~ ns(age, c)* sex + (ns(age, 2) | id ),
REML = F, data = dat)
ggeffect(l, terms = c("age [all]", "sex [all]")) %>% plot()
}
rcs_mf <- map(3:6, possibly(~ { eval(parse(text = paste0(
"lmer(bmi ~ ns(age, ", .x, ")* sex + (ns(age, 2) | id ),
REML = F, data = dat)")))}, otherwise = NA_real_))
(rcs_mf_best <- rcs_mf[[which.min(unlist(map(rcs_mf, BIC)))]])
attr(terms(rcs_mf_best), "predvars")
ggeffect(rcs_mf_best, terms = c("age [all]", "sex [all]")) %>% plot()
source("~/Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Advanced Stats/Week 9/Practical 2, spline models for repeated measures/lecture_2_practical.R", echo=TRUE)
dat_f <- dat %>% filter(sex == "F")
with(dat, plot(age, bmi))
dat %>% group_by(sex) %>% summarise(N = n_distinct(id))
dat %>% group_by(id) %>% count() %>% ungroup() %>%
summarise(median(n), min(n), max(n))
(quad_m <- lmer(bmi ~ poly(age, 2) + (poly(age, 2) | id ), data = dat_m))
(quad_f <- lmer(bmi ~ poly(age, 2) + (poly(age, 2) | id ), data = dat_f))
ggeffect(quad_m, terms = c("age [all]")) %>% plot()
ggeffect(quad_f, terms = c("age [all]")) %>% plot()
(cubic_m <- lmer(bmi ~ poly(age, 3) + (poly(age, 2) | id ), data = dat_m))
(quad_m <- lmer(bmi ~ poly(age, 2) + (poly(age, 2) | id ), data = dat_m))
(quad_f <- lmer(bmi ~ poly(age, 2) + (poly(age, 2) | id ), data = dat_f))
ggeffect(quad_m, terms = c("age [all]")) %>% plot()
ggeffect(quad_f, terms = c("age [all]")) %>% plot()
(cubic_m <- lmer(bmi ~ poly(age, 3) + (poly(age, 2) | id ), data = dat_m))
(cubic_f <- lmer(bmi ~ poly(age, 3) + (poly(age, 2) | id ), data = dat_f))
ggeffect(cubic_m, terms = c("age [all]")) %>% plot()
ggeffect(cubic_f, terms = c("age [all]")) %>% plot()
(quintic_m <- lmer(bmi ~ poly(age, 5) + (poly(age, 2) | id ), data = dat_m))
(quintic_f <- lmer(bmi ~ poly(age, 5) + (poly(age, 2) | id ), data = dat_f))
ggeffect(quintic_m, terms = c("age [all]")) %>% plot()
ggeffect(quintic_f, terms = c("age [all]")) %>% plot()
(quintic_mf <- lmer(bmi ~ poly(age, 5) * sex + (poly(age, 2) | id ), data = dat))
ggeffect(quintic_mf, terms = c("age [all]", "sex [all]")) %>% plot()
ls_m <- map(3:6, possibly(~ { eval(parse(text = paste0(
"lmer(bmi ~ qlspline(age, ", .x, ") + (qlspline(age, 2) | id ),
REML = F, data = dat_m)")))}, otherwise = NA_real_))
(ls_m_best <- ls_m[[which.min(unlist(map(ls_m, BIC)))]])
attr(terms(ls_m_best), "predvars")
ggeffect(ls_m_best, terms = c("age [all]")) %>% plot()
as.data.frame(tidy(ls_m_best, conf.int = T)) %>%
filter(effect == "fixed") %>% select(-group)
ls_f <- map(3:6, possibly(~ { eval(parse(text = paste0(
"lmer(bmi ~ qlspline(age, ", .x, ") + (qlspline(age, 2) | id ),
REML = F, data = dat_f)")))}, otherwise = NA_real_))
(ls_f_best <- ls_f[[which.min(unlist(map(ls_f, BIC)))]])
(ls_f_best <- ls_f[[which.min(unlist(map(ls_f, BIC)))]])
attr(terms(ls_f_best), "predvars")
ggeffect(ls_f_best, terms = c("age [all]")) %>% plot()
as.data.frame(tidy(ls_f_best, conf.int = T)) %>%
filter(effect == "fixed") %>% select(-group)
ls_mf <- map(3:6, possibly(~ { eval(parse(text = paste0(
"lmer(bmi ~ qlspline(age, ", .x, ") * sex + (qlspline(age, 2) | id ),
REML = F, data = dat)")))}, otherwise = NA_real_))
(ls_mf_best <- ls_mf[[which.min(unlist(map(ls_mf, BIC)))]])
attr(terms(ls_mf_best), "predvars")
ggeffect(ls_mf_best, terms = c("age [all]", "sex [all]")) %>% plot()
as.data.frame(tidy(ls_mf_best, conf.int = T)) %>%
filter(effect == "fixed") %>% select(-group)
rcs_m <- map(3:6, possibly(~ { eval(parse(text = paste0(
"lmer(bmi ~ ns(age, ", .x, ") + (ns(age, 2) | id ),
REML = F, data = dat_m)")))}, otherwise = NA_real_))
(rcs_m_best <- rcs_m[[which.min(unlist(map(rcs_m, BIC)))]])
attr(terms(rcs_m_best), "predvars")
ggeffect(rcs_m_best, terms = c("age [all]")) %>% plot()
rcs_f <- map(3:6, possibly(~ { eval(parse(text = paste0(
"lmer(bmi ~ ns(age, ", .x, ") + (ns(age, 2) | id ),
REML = F, data = dat_f)")))}, otherwise = NA_real_))
(rcs_f_best <- rcs_f[[which.min(unlist(map(rcs_f, BIC)))]])
attr(terms(rcs_f_best), "predvars")
ggeffect(rcs_f_best, terms = c("age [all]")) %>% plot()
rcs_mf <- map(3:6, possibly(~ { eval(parse(text = paste0(
"lmer(bmi ~ ns(age, ", .x, ")* sex + (ns(age, 2) | id ),
REML = F, data = dat)")))}, otherwise = NA_real_))
(rcs_mf_best <- rcs_mf[[which.min(unlist(map(rcs_mf, BIC)))]])
attr(terms(rcs_mf_best), "predvars")
ggeffect(rcs_mf_best, terms = c("age [all]", "sex [all]")) %>% plot()
(pred_means <- ggemmeans(rcs_mf_best, terms = c(
"age [0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7]",
"sex [all]")) %>% as.data.frame())
(pred_diff <- map2_df(
c('1:2', '3:4', '5:6', '7:8', '9:10', '11:12', '13:14',
'15:16', '17:18','19:20', '21:22', '23:24', '25:26', '27:28'),
c(0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7), ~ {
eval(parse(text = paste0("tidy(rma(predicted, sei = std.error, mods = ~ group,
method = 'FE', data = pred_means[", .x, ",]), conf.int = T) %>% filter(
term == 'groupM') %>% mutate(age = ", .y, ")")))}))
ggplot(data = pred_diff, aes(
x = age, y = estimate, ymin = conf.low, ymax = conf.high)) + theme_classic() +
geom_pointrange() + geom_hline(yintercept = 0, col = "red") +scale_x_continuous(
breaks = c(0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7)) +
xlab("age (years)") + ylab("predicted mean difference (Males minus Females)")
m_gamm <- gamm(
bmi ~ s(log(age), bs = 'ps', k = 10, m = c(2, 2)) +
s(log(age), id, bs = "fs", xt = "ps", k = 10, m = c(2, 1)),
method = "REML", data = dat_m)
summary(m_gamm$gam)
ggpredict(m_gamm, terms = c("age [all]")) %>% plot()
f_gamm <- gamm(
bmi ~ s(log(age), bs = 'ps', k = 10, m = c(2, 2)) +
s(log(age), id, bs = "fs", xt = "ps", k = 10, m = c(2, 1)),
method = "REML", data = dat_f)
summary(f_gamm$gam)
ggpredict(f_gamm, terms = c("age [all]")) %>% plot()
mf_gamm <- gamm(
bmi ~ sex + s(log(age), by = sex, bs = 'ps', k = 10, m = c(2, 2)) +
s(log(age), id, bs = "fs", xt = "ps", k = 10, m = c(2, 1)),
method = "REML", data = dat)
summary(mf_gamm$gam)
knitr::opts_chunk$set(echo = TRUE)
readRDS("summative-assessment.rds")
dat <- readRDS("summative-assessment.rds")
head(dat)
summary(dat)
Read in data
dat <- readRDS("summative-assessment.rds")
head(dat)
summary(dat)
nrow(dat)
remotes::install_github("perishky/r_jive")
library(ajive) ## angle-based JIVE
library(cowplot)
library(GGally)
library(reshape2)
library(ggplot2) ## plotting
library(mclust) ## Gaussian mixture modelling
data.dir = ""
participants = read.csv("participants.csv")
counts = read.csv("cell-counts.csv", row.names=1)
omics = list(
meth=readRDS("meth.rds"),
prot=readRDS("protein.rds"),
metab=readRDS("metabolite.rds"))
for (i in 1:length(omics)){
omics[[i]] = t(omics[[i]])
}
for (i in 1:length(omics)) {
omics[[i]] = scale(omics[[i]],center=T,scale=T)
}
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from", names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
min.prop = 0.8
r = sapply(omics, function(omic) {
sdev = prcomp(omic)$sdev ## std dev of each principal component
which(cumsum(sdev^2/sum(sdev^2)) > min.prop)[1]
}) ## takes about 30s to run
r
cbind(
features=sapply(omics, ncol),
"rank estimate"=r)
library(knitr)
knitr::read_chunk('setup.r')
ret.jive = readRDS(file.path(data.dir, "ret-ajive.rds"))
ret.jive = readRDS("ret-ajive.rds")
omic.num = 1
Si = get_block_full(ret.jive, omic.num, type='joint')
Ii = get_block_full(ret.jive, omic.num, type='individual')
Ei = get_block_full(ret.jive, omic.num, type='noise')
range(omics[[omic.num]]-(Si+Ii+Ei))
omic[[omic.num]]
omics[[omic.num]]
head(omics[[omic.num]])
dim(omics[[omic.num]])
dim(Si)
dim(Ii)
dim(Ei)
range(omics[[omic.num]][:34996:]-(Si+Ii+Ei))
range(omics[[omic.num]][:34996,]-(Si+Ii+Ei))
range(omics[[omic.num]][1:34996,]-(Si+Ii+Ei))
range(omics[[omic.num]][,1:34996]-(Si+Ii+Ei))
summary(omics[[omic.num]][,1:34996]-(Si+Ii+Ei))
range(omics[[omic.num]][,1:34996]-(Si+Ii+Ei))
mean(omics[[omic.num]][,1:34996]-(Si+Ii+Ei))
dim(omics[[omic.num]])
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from", names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
dim[[omics]]
dim(omics)
dim(omics[[omic.num]])
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from", names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
dim(omics[[omic.num]])
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from", names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
for (i in 1:length(omics)) {
omics[[i]] = scale(omics[[i]],center=T,scale=T)
}
for (i in 1:length(omics)){
omics[[i]] = t(omics[[i]])
}
omics = list(
meth=readRDS("meth.rds"),
prot=readRDS("protein.rds"),
metab=readRDS("metabolite.rds"))
for (i in 1:length(omics)){
omics[[i]] = t(omics[[i]])
}
for (i in 1:length(omics)) {
omics[[i]] = scale(omics[[i]],center=T,scale=T)
}
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from", names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
length(omics)
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
dim(omics[[omic.num]])
dim(omics[[counts]])
dim(omics[["meth"]])
counts = read.csv("cell-counts.csv", row.names=1)
omics = list(
meth=readRDS("meth.rds"),
prot=readRDS("protein.rds"),
metab=readRDS("metabolite.rds"))
participants = read.csv("participants.csv")
dim(participants)
dim(counts)
dim(omics$meth)
dim(omics$prot)
dim(omics$metab)
participants[1:5,]
counts[1:5,]
omics$meth[1:5,1:5]
omics$prot[1:5,1:5]
omics$metab[1:5,1:5]
for (i in 1:length(omics)){
omics[[i]] = t(omics[[i]])
}
for (i in 1:length(omics)) {
omics[[i]] = scale(omics[[i]],center=T,scale=T)
}
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
dim(omics[["meth"]])
??all
for (i in 1:length(omics)) {
all.missing = sapply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
dim(omics[["meth"]])
??all
for (i in 1:length(omics)) {
all.missing = sapply(omics[[i]], function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
all.missing
table(all.missing)
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
all.missing
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
data.dir = ""
participants = read.csv("participants.csv")
counts = read.csv("cell-counts.csv", row.names=1)
omics = list(
meth=readRDS("meth.rds"),
prot=readRDS("protein.rds"),
metab=readRDS("metabolite.rds"))
for (i in 1:length(omics)){
omics[[i]] = t(omics[[i]])
}
for (i in 1:length(omics)) {
omics[[i]] = scale(omics[[i]],center=T,scale=T)
}
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
all.missing
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
table(all.missing)
dim(omics[["meth"]])
??all
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
table(all.missing)
dim(omics[["metab"]])
dim(omics[["meth"]])
all.missing = apply(omics[["meth"]], 2, function(x) all(is.na(x)))
all.missing
table(all.missing)
omics = list(
meth=readRDS("meth.rds"),
prot=readRDS("protein.rds"),
metab=readRDS("metabolite.rds"))
all.missing = apply(omics[["meth"]], 2, function(x) all(is.na(x)))
tbale(all.missing)
table(all.missing)
all.missing = apply(t(omics[["meth"]]), 2, function(x) all(is.na(x)))
table(all.missing)
head(omics[["meth"]])
all.missing = apply(t(omics[["meth"]]), 2, function(x) any(is.na(x)))
table(all.missing)
omics = list(
meth=readRDS("meth.rds"),
prot=readRDS("protein.rds"),
metab=readRDS("metabolite.rds"))
all.missing = apply(t(omics[["meth"]]), 2, function(x) any(is.na(x)))
all.missing = apply(t(omics[["meth"]]), 2, function(x) all(is.na(x)))
table(all.missing)
for (i in 1:length(omics)){
omics[[i]] = t(omics[[i]])
}
for (i in 1:length(omics)) {
omics[[i]] = scale(omics[[i]],center=T,scale=T)
}
all.missing = apply(t(omics[["meth"]]), 2, function(x) all(is.na(x)))
table(all.missing)
all.missing = apply((omics[["meth"]]), 2, function(x) all(is.na(x)))
table(all.missing)
omics = list(
meth=readRDS("meth.rds"),
prot=readRDS("protein.rds"),
metab=readRDS("metabolite.rds"))
for (i in 1:length(omics)){
omics[[i]] = t(omics[[i]])
}
for (i in 1:length(omics)) {
omics[[i]] = scale(omics[[i]],center=T,scale=T)
}
for (i in 1:length(omics)) {
all.missing = apply(omics[[i]], 2, function(x) all(is.na(x)))
if (any(all.missing)) {
cat(sum(all.missing), "columns being removed from",
names(omics)[i], "\n")
omics[[i]] = omics[[i]][,!all.missing]
}
}
table(all.missing)
dim(omics[["meth"]])
sum(is.na(omics$meth))
apply(omics$meth[,1:5],2,sd)
apply(omics$meth[,1:5],2,mean)
ret.jive = readRDS("ret-ajive.rds")
sapply(names(omics), function(name) {
omic.num = which(names(omics)==name)
Si = get_block_full(ret.jive, omic.num, type="joint")
Ii = get_block_full(ret.jive, omic.num, type="individual")
Ei = get_block_full(ret.jive, omic.num, type="noise")
c(Joint=sum(Si^2),
Indiv=sum(Ii^2),
Noise=sum(Ei^2))/sum(omics[[name]]^2)
})
S = get_common_normalized_scores(ret.jive)
S
nrow(S)
ncol(S)
gmfit = Mclust(S,2)
table(gmfit$classification)
vars = c(
"height",
"age",
"weight",
"bmi",
"waistcirc",
"hipcirc",
"sysbp",
"diabp",
"pulse",
"arterialthickness",
"insulin",
"glucose",
"cholesterol",
"triglycerides",
"hdl",
"ldl",
"crp",
"education",
"whr")
stats = sapply(vars, function(varname) {
dat = data.frame(
var=participants[[varname]],
cluster=as.vector(gmfit$classification))
fit = lm(var~cluster,data=dat)
coef(summary(fit))[2,]
})
stats = t(stats)
stats[order(stats[,"Pr(>|t|)"]),]
get_common_loadings = function(ajive_output, k) {
S = get_common_normalized_scores(ajive_output)
X = (get_block_full(ajive_output, k, type='joint')
+ get_block_full(ajive_output, k, type='individual')
+ get_block_full(ajive_output, k, type='noise'))
t(diag(1/diag(t(S)%*%S)) %*% t(S) %*% X)
}
LSi = get_common_loadings(ret.jive, omic.num)
LSi = get_common_loadings(ret.jive, omic.num)
range(Si - (S %*% t(LSi)))
get_common_loadings = function(ajive_output, k) {
S = get_common_normalized_scores(ajive_output)
X = (get_block_full(ajive_output, k, type='joint')
+ get_block_full(ajive_output, k, type='individual')
+ get_block_full(ajive_output, k, type='noise'))
t(diag(1/diag(t(S)%*%S)) %*% t(S) %*% X)
}
get_common_loadings = function(ajive_output, k) {
S = get_common_normalized_scores(ajive_output)
X = (get_block_full(ajive_output, k, type='joint')
+ get_block_full(ajive_output, k, type='individual')
+ get_block_full(ajive_output, k, type='noise'))
t(diag(1/diag(t(S)%*%S)) %*% t(S) %*% X)
}
LSi = get_common_loadings(ret.jive, omic.num)
range(Si - (S %*% t(LSi)))
library(data.table)
library(dplyr)
library(parallel)
library(praznik)
library(mlr3pipelines)
library(mlr3filters)
library(mlr3learners)
library(mlr3tuning)
library(caret)
library(mlr3extralearners)
library(mlr3viz)
library(precrec) ## mlr3 plots
library(rpart) ## classification trees
library(ranger) ## random forest
library(glmnet) ## lasso
library(igraph) ## mlr3 pipelines
library(data.table)
library(neuralnet)
library(pROC)
library(ggplot2)
renv::init()
setwd("/Users/benny/Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Machine Learning/summativeset/ML_Summative_2")
renv::init()
setwd("/Users/benny/Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Machine Learning/summativeset/ML_Summative_2/ML_Summative_2_Compendium")
renv::init()
